version: 2.1
orbs:
  go: {}
  orb-tools: circleci/orb-tools@12.0

filters: &filters
  tags:
    only: /.*/

release-filters: &release-filters
  branches:
    ignore: /.*/
  tags:
    only: /^v[0-9]+\.[0-9]+\.[0-9]+$/

executors:
  alpine:
    resource_class: medium
    docker:
      - image: alpine:latest
  go:
    resource_class: medium
    docker:
      - image: cimg/go:1.23
  go_arm:
    resource_class: arm.medium
    docker:
      - image: cimg/go:1.23
  mac:
    resource_class: m2pro.medium
    macos:
      xcode: "16.2.0"
  ubuntu_machine:
    resource_class: medium
    machine:
      image: ubuntu-2204:current
  ubuntu_machine_arm:
    resource_class: arm.medium
    machine:
      image: ubuntu-2204:current
  win2022_bash:
    resource_class: windows.medium
    machine:
      image: windows-server-2022-gui:2024.12.1
      shell: bash.exe
  win2022_cmd:
    resource_class: windows.medium
    machine:
      image: windows-server-2022-gui:2024.12.1
      shell: cmd.exe
  win2022_powershell:
    resource_class: windows.medium
    machine:
      image: windows-server-2022-gui:2024.12.1
      shell: powershell.exe

commands:
  alpine_install_curl:
    steps:
      - run:
          name: Alpine install curl
          command: apk add --no-cache curl

jobs:
  int-test-goreleaser-install:
    executor: << parameters.executor >>
    parameters:
      executor:
        type: executor
    steps:
      - go/install-goreleaser
      - run:
          name: Goreleaser version (testing path)
          command: goreleaser --version
  int-test-goreleaser-install-alpine:
    executor: alpine
    steps:
      - alpine_install_curl
      - go/install-goreleaser:
          shell: sh
  int-test-goreleaser-install-pinned-version:
    executor: ubuntu_machine
    steps:
      - go/install-goreleaser:
          version: v1.26.2
      - run:
          name: Goreleaser version check
          command: goreleaser --version | grep "1.26.2"
  int-test-goreleaser-release:
    executor:
      name: go/default
      tag: "1.23"
    steps:
      - go/install-goreleaser
      - go/goreleaser-release:
          github-token: TEST_GH_TOKEN
          validate-yaml: true
          publish-release: false
          project-path: ~/project/tests
  int-test-cimg-go:
    executor:
      name: go/default
      tag: "1.23"
    steps:
      - run:
          name: "Check out sample project."
          command: git clone https://github.com/CircleCI-Public/circleci-demo-go.git ~/project
      - go/with-cache:
          key: "integration"
          mod: true
          golangci-lint: true
          steps:
            - go/mod-download
            - run: go version && go build ./...
  int-test-cimg-base:
    docker:
      - image: cimg/base:stable
    steps:
      - run:
          name: "Check out sample project."
          command: git clone https://github.com/CircleCI-Public/circleci-demo-go.git ~/project
      - go/install
      - go/with-cache:
          key: "integration"
          mod: true
          golangci-lint: true
          steps:
            - go/mod-download
            - run: go version && go build ./...
  int-test-cimg-python:
    docker:
      - image: cimg/python:3.11
    steps:
      - go/install:
          version: 1.17.2
      - run:
          name: "Check if the correct python version is accessible & installed"
          command: python --version | grep -q "^Python 3.11"
  int-test-alpine:
    executor: alpine
    steps:
      - alpine_install_curl
      - go/install:
          version: 1.17.2
      - run:
          name: "Check if the correct go version is accessible & installed"
          command: go version | grep -q "1.17.2"
  int-test-macos-executor:
    executor: mac
    steps:
      - run:
          name: "Check out sample project."
          command: git clone https://github.com/CircleCI-Public/circleci-demo-go.git ~/project
      - go/install
      - go/with-cache:
          key: "integration"
          mod: true
          golangci-lint: true
          steps:
            - go/mod-download
            - run: go version && go build ./...
  int-test-vm-linux:
    executor: ubuntu_machine
    steps:
      - run:
          name: "Check out sample project."
          command: git clone https://github.com/CircleCI-Public/circleci-demo-go.git ~/project
      - go/install:
          version: 1.16.4
      - go/with-cache:
          key: "integration"
          mod: true
          golangci-lint: true
          steps:
            - go/mod-download
            - run: go version && go build ./...
  int-test-vm-arm64:
    executor: ubuntu_machine_arm
    steps:
      - run:
          name: "Check out sample project."
          command: git clone https://github.com/CircleCI-Public/circleci-demo-go.git ~/project
      - go/install:
          version: 1.16.4
      - go/with-cache:
          key: "integration"
          mod: true
          golangci-lint: true
          steps:
            - go/mod-download
            - run: go version && go build ./...
  # test to make sure the dirty cache issue doesn't crop back up
  int-test-dirty-cache:
    executor: ubuntu_machine
    steps:
      - run:
          name: "Check out sample project."
          command: git clone https://github.com/CircleCI-Public/circleci-demo-go.git ~/project
      - go/install:
          version: 1.15.1
      - go/load-mod-cache:
          key: "integration"
      - go/mod-download
      - run: go version && go build ./...
      - go/save-mod-cache:
          key: "integration"
      - go/install:
          version: 1.16.4
      - run: go version && go build ./...
  go-test-default:
    executor:
      name: go/default
      tag: "1.23"
    docker:
      - image: cimg/go:1.23.3
    steps:
      - checkout
      - go/test:
          project-path: tests
  int-test-gotestsum-1-test:
    docker:
      - image: cimg/go:1.23.3
    steps:
      - checkout
      - go/gotestsum:
          project-path: tests
          packages: circleci.com/go-orb/numbers
      - store_test_results:
          path: /home/circleci/project/tests
  int-test-gotestsum-2-test:
    executor:
      name: go/default
      tag: "1.23"
    steps:
      - checkout
      - go/gotestsum:
          project-path: tests
          packages: circleci.com/go-orb/numbers circleci.com/go-orb/words
      - store_test_results:
          path: /home/circleci/project/tests
  int-test-gotestsum-all-test:
    docker:
      - image: cimg/go:1.23.3
    steps:
      - checkout
      - go/gotestsum:
          project-path: tests
      - store_test_results:
          path: /home/circleci/project/tests
workflows:
  test-deploy:
    jobs:
      # Make sure to include "filters: *filters" in every test job you want to run as part of your deployment.
      - int-test-goreleaser-install:
          name: int-test-goreleaser-install-<< matrix.executor >>
          filters: *filters
          matrix:
            alias: int-test-goreleaser-install
            parameters:
              executor: [go, go_arm, mac, ubuntu_machine, ubuntu_machine_arm, win2022_bash, win2022_cmd, win2022_powershell]
      - int-test-goreleaser-install-alpine:
          filters: *filters
      - int-test-goreleaser-install-pinned-version:
          filters: *filters
      - int-test-goreleaser-release:
          pre-steps:
            - checkout
            - run:
                name: Change to test directory
                command: cd ~/project/tests
          filters: *filters
      - int-test-cimg-go:
          filters: *filters
      - int-test-cimg-base:
          filters: *filters
      - int-test-cimg-python:
          filters: *filters
      - int-test-alpine:
          filters: *filters
      - int-test-macos-executor:
          filters: *filters
      - int-test-vm-linux:
          filters: *filters
      - int-test-dirty-cache:
          filters: *filters
      - int-test-vm-arm64:
          filters: *filters
      - go-test-default:
          filters: *filters
      - int-test-gotestsum-1-test:
          filters: *filters
      - int-test-gotestsum-2-test:
          filters: *filters
      - int-test-gotestsum-all-test:
          filters: *filters
      - orb-tools/pack:
          filters: *release-filters
      - orb-tools/publish:
          orb_name: circleci/go
          vcs_type: << pipeline.project.type >>
          pub_type: production
          github_token: GHI_TOKEN
          requires:
            - orb-tools/pack
            - int-test-cimg-go
            - int-test-cimg-base
            - int-test-cimg-python
            - int-test-alpine
            - int-test-macos-executor
            - int-test-vm-linux
            - int-test-dirty-cache
            - int-test-vm-arm64
            - int-test-goreleaser-install
            - int-test-goreleaser-install-alpine
            - int-test-goreleaser-install-pinned-version
            - int-test-goreleaser-release
          context: orb-publisher
          filters: *release-filters
