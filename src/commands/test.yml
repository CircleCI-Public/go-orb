description: |
  Runs 'go test ./...' but includes extensive parameterization for finer tuning
parameters:
  packages:
    description: Import tests to run, by path glob.
    type: string
    default: "./..."
  race:
    description: |
      run tests with -race option
      (if enabled, update covermode to be "atomic")
    type: boolean
    default: false
  count:
    description: run each test and benchmark n times
    type: string
    default: "1"
  failfast:
    description: do not start new tests after the first test failure
    type: boolean
    default: false
  short:
    description: tell long-running tests to shorten their run time
    type: boolean
    default: false
  timeout:
    description: timeout the test and panic after value - for situations where a test has a valid usecase to go longer than 10m
    type: string
    default: "10m"
  parallel:
    description: |
      The number of programs, such as build commands or
      test binaries, that can be run in parallel.
      The default is GOMAXPROCS, normally the number of CPUs available.
    type: string
    default: "m"
  parallel-tests:
      Allow parallel execution of test functions that call t.Parallel.
      The value of this flag is the maximum number of tests to run
      simultaneously.
      By default, -parallel is set to the value of GOMAXPROCS.
    type: string
    default: "m"
  coverprofile:
    description: file to save coverage profile
    type: string
    default: "cover-source.out"
  covermode:
    description: |
      flag to set the coverage mode
      (the go default is: "set", unless -race is enabled, in which case the go default is "atomic")
    type: enum
    enum: [ "set", "count", "atomic" ]
    default: "set"
  verbose:
    description: log all tests as they are run. Also print all text from Log and Logf calls even if the test succeeds.
    type: boolean
    # Switch this to true in a major release
    default: false
  no_output_timeout:
    type: string
    default: 10m
    description: The amount of time to allow the command to run before timing out.
  coverpkg:
    description: |
      Apply coverage analysis in each test to packages matching the patterns.
      (Sets -cover.)
    type: string
    default: "./..."
  project-path:
    description: |
      The path to the directory containing your Go project files:
      .goreleaser.yaml, go.mod, main.go.
      Defaults to $HOME.
    type: string
    default: ""
steps:
  - run:
      environment:
        ORB_VAL_RACE: <<parameters.race>>
        ORB_VAL_COUNT: <<parameters.count>>
        ORB_VAL_FAILFAST: <<parameters.failfast>>
        ORB_VAL_SHORT: <<parameters.short>>
        ORB_VAL_TIMEOUT: <<parameters.timeout>>
        ORB_VAL_PARALLEL: <<parameters.parallel>>
        ORB_VAL_PARALLEL_TESTS: <<parameters.parallel-tests>>
        ORB_VAL_COVER_MODE: <<parameters.covermode>>
        ORB_VAL_VERBOSE: <<parameters.verbose>>
        ORB_VAL_PACKAGES: <<parameters.packages>>
        ORB_VAL_COVERPKG: <<parameters.coverpkg>>
        ORB_EVAL_COVER_PROFILE: <<parameters.coverprofile>>
        ORB_EVAL_PROJECT_PATH: <<parameters.project-path>>
      command: <<include(scripts/test.sh)>>
      name: "go test"
      no_output_timeout: <<parameters.no_output_timeout>>
